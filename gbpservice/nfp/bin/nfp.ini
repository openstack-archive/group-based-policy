[ORCHESTRATOR]
# Number of worker process to be spawned.
workers=1
# Path to NFP modules in . format
# NFP core framework will load all .py files
# from this path as nfp modules
nfp_modules_path=gbpservice.nfp.orchestrator.modules
# To invoke OTC Apis
# It could be rpc/REST.
# rpc -  where fip access unavaiable for OTC NFP controller
# REST - where fip access is available for OTC NFP controller
backend=rpc
# supported service vendors
supported_vendors=vyos,nfp,haproxy
monitoring_ptg_l3policy_id=l3policy-id

[PROXY_AGENT]
# Number of worker process to be spawned.
workers=1
# Path to NFP modules in . format
# NFP core framework will load all .py files
# from this path as nfp modules
nfp_modules_path=gbpservice.nfp.proxy_agent.modules
# To invoke OTC Apis
# Proxy agent will always use unix_rest backend to
# communicate with proxy component inside namespace
backend=unix_rest

[PROXY]
# Path unix server should bind to
unix_bind_path= /var/run/uds_socket
# Max number of client connections
max_connections=10
# Num of worker threads to handle connections
worker_threads=100
# Timeout for 'connect' operation
connect_max_wait_timeout=120
# Max time an idle channel is allowed to be open
idle_max_wait_timeout=120
# Min time to wait on channel to declare its idle.
idle_min_wait_timeout=0.1
#NFP controllers ip address and port
nfp_controller_ip=172.16.0.3
nfp_controller_port=8070


# Section describing params for backend=rpc
[RPC]
# Topic to send OTC request rpc on.
topic=nfp-proxy-agent-topic

[nfp_keystone_authtoken]
admin_user=
admin_password=
admin_tenant_name=
auth_protocol=
auth_host=
auth_port=
auth_version=

[heat_driver]
# External network on which vpn sites/users connect,
# user access floating ip is set in the vpn description from this network
#internet_out_network_name =
